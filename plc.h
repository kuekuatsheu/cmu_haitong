#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <asm/termios.h>
#include <sys/syscall.h>
#include <pthread.h>
#include <string.h>
#include <sys/time.h>
#include "adjust.h"
#ifndef SERIAL
#define SERIAL
#include "general/serial.h"
#endif
#ifndef CLIENT
#define CLIENT
#include "client.h"
#endif
#if 0
#ifndef GPIO
#define GPIO
#include "general/gpio.h"
#endif
#ifndef GLOBAL
#define GLOBAL
#include "general/global.h"
#endif
#ifndef VARIABLE
#define VARIABLE
#include "general/Variable.h"
#endif
#endif
#include "BSP_R8025T.h"
//#include "BSP_Oled.h"
#ifndef LOGFILE
#define LOGFILE
#include "log.h"
#endif

//#include "client.h"
//#define PLC_RST 45
#define LTU_NO_1 1//for tsingtao CMU select 
#define PLC_RST TFT_R1

#define CMD_QUERY_03_10 0
#define CMD_QUERY_CMU_ADDR 1
#define CMD_STOP_ROUTE 2
#define CMD_LTU_NUM 3
#define CMD_LTU_INFO 4
#define CMD_RESTART_ROUTE 5
#define CMD_REQ_CLK 6
#define CMD_RESUME_ROUTE 7
#define CMD_REQ_READ 8
#define CMD_SET_CMD_ADDR 12
#define CMD_ADD_LTU 13
#define CMD_REQ_14_04 15
#define CMD_READ_LTU 16
#define CMD_PARA_INIT 17
#define CMD_ALLOW_LTU_SEND 18

#define KEY_1 MCASP0_AXR1
#define KEY_2 MCASP0_AXR0

#define LTU_NUM 12// 10 avail + 2 for test or NULL 

//U8 sign_read = 1;//for the thread_uart_read circle run sign 
//U8 exit_sign[] = {'1','1','0',0x0d,0x0a};
U8 sign_write = 1,sign_read = 1;
int data_sign = 0;
//static int n_com_port = ttyO4;//old
static int n_com_port = ttyO2;//new
static int plc_uart = ttyO3;
int num_msg = 0;
int plc_power_on;
//#if 0
U8 CCO_data[][256]={
//---0x68--L1----L2---C-----R                           R--AFN----DT1  DT2--CS--0x16
    {0x68, 0x0F,0x00, 0x43, 0x00,0x00,0x00,0x00,0x00,0x00, 0x03, 0x02,0x01 ,0x00,0x16 },//0----- 0x03 F10 req route runtime information
    {0x68, 0x0F,0x00, 0x43, 0x00,0x00,0x00,0x00,0x00,0x01, 0x03, 0x08,0x00 ,0x00,0x16 },//1-----0x03,F4 req the host addr 
    {0x68, 0x0F,0x00, 0x43, 0x00,0x00,0x00,0x00,0x00,0x02, 0x12, 0x02,0x00 ,0x00,0x16 },//2-----0x12 F2 stop route
    {0x68, 0x0F,0x00, 0x43, 0x00,0x00,0x5F,0x00,0x00,0x03, 0x10, 0x01,0x00 ,0x00,0x16 },//3-----0x10 F1 request the ltu number
    {0x68, 0x12,0x00, 0x43, 0x01,0x00,0x00,0x00,0x00,0x04, 0x10, 0x02,0x00,0x01,0x00,0x03 ,0x00,0x16 },//4-----0x10 F2 req ltu info
    
    {0x68, 0x0F,0x00, 0x43, 0x01,0x00,0x00,0x00,0x00,0x00, 0x12, 0x01,0x00 ,0x00,0x16 },//5-----0x12 F1 reboot route
    {0x68, 0x15,0x00, 0x03, 0x00,0x00,0x00,0x00,0x00,0x04, 0x14, 0x02,0x00 ,0x29,0x34,0x15,0x07,0x07,0x15,0x00,0x16 },//6-----0x14 F2
    {0x68, 0x0F,0x00, 0x43, 0x00,0x00,0x00,0x00,0x00,0x06, 0x12, 0x04,0x00 ,0x00,0x16 },//7-----0x12 F3 resume the route
    {0x68, 0x23,0x00, 0x03, 0x00,0x00,0x00,0x00,0x00,0x03, 0x14, 0x01,0x00 ,0x02,0x00,0x10,0x68,0x01,0x00,0x00,0x00,0x00,0x00,0x68,0x11,0x04,0x33,0x32,0x34,0x33,0xB2,0x16,0x00,0x00,0x16 },//8-----0x14 F1 request to read the lte VA information
    {0x68, 0x23,0x00, 0x03, 0x00,0x00,0x00,0x00,0x00,0x03, 0x14, 0x01,0x00 ,0x02,0x00,0x10,0x68,0x01,0x00,0x00,0x00,0x00,0x00,0x68,0x11,0x04,0x33,0x32,0x34,0x35,0xB2,0x16,0x00,0x00,0x16 },//9-----0x14 F1 req the ltu V information
    {0x68, 0x23,0x00, 0x03, 0x00,0x00,0x00,0x00,0x00,0x03, 0x14, 0x01,0x00 ,0x02,0x00,0x10,0x68,0x01,0x00,0x00,0x00,0x00,0x00,0x68,0x11,0x04,0x33,0x32,0x34,0x35,0xB2,0x16,0x00,0x00,0x16 },//10-----0x14 F1 req the ltu A information
    {0x68, 0x23,0x00, 0x03, 0x00,0x00,0x00,0x00,0x00,0x03, 0x14, 0x01,0x00 ,0x02,0x00,0x10,0x68, 0x01,0x00,0x00,0x00,0x00,0x00 /*addr*/, 0x68,0x11,0x04,0x33,0x32,0x32,0x33,0xB2,0x16,0x00,0x00,0x16 },//11-----0x14 F1 req the ltu A information



    {0x68, 0x15,0x00, 0x43, 0x00,0x00,0x00,0x00,0x00,0x00, 0x05, 0x01,0x00 ,0x01,0x00,0x00,0x00,0x00,0x01,0x00,0x16 },//12-----0x05 F1 set the host add
    {0x68, 0x17,0x00, 0x43, 0x00,0x00,0x00,0x00,0x00,0x05, 0x11, 0x01,0x00 ,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x16 },//13-----0x11 F1 add ltu by one
    {0x68, 0x17,0x00, 0x43, 0x00,0x00,0x5F,0x00,0x00,0x00, 0x11, 0x10,0x00 ,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x16 },//14-----0x11 F1 

    {0x68, 0x2c,0x00, 0x43, 0x05,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x14, 0x04,0x00 ,0x10,0x68,0x01,0x00,0x00,0x00,0x00,0x00,0x68,0x11,0x04,0x33,0x33,0x34,0x33,0xBB,0x16,0x00,0x16 },//15-----0x14 F3 req hosti
    {0x68/*0-*/, 0x2F,0x00, 0x43,/**/ 0x04,0x00,0x00,0x00,0x00,0x00/*10-*/,0x01,0x00,0x00,0x00,0x00,0x01/*16-*/,0x00,0x00,0x00,0x00,0x00,0x01/**/,0x13, 0x01,0x00 ,0x02,/*type*/ 0x00, 0x00/*15-nu*//*28-addr*/,0x10/*29-len-16*/,0x68/*30-*/,0x00,0x00,0x00,0x00,0x00,0x00/*addr*/,0x68,0x11,/**/0x04,/**/0x33,0x32,0x32,0x33/**/,0x00/*CS*/,0x16,0x00,0x16 },//16-----0x13 F1 req hosti
    //{0x68, 0x2F,0x00, 0x43,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x13, 0x01,0x00 ,0x02, 0x00, 0x00,0x10/*29-len-16*/,0x68/*30-*/,0x00,0x00,0x00,0x00,0x00,0x00/*addr*/,0x68,0x11,/**/0x04,/**/0x33,0x32,0x32,0x33/**/,0x00/*CS*/,0x16,0x00,0x16 },//16-----0x13 F1 req hosti
    {0x68, 0x0F,0x00, 0x43, 0x01,0x00,0x00,0x00,0x00,0x00, 0x01, 0x02,0x00 ,0x00,0x16 },//17-----0x0x F2 erase the data area
    {0x68, 0x10,0x00, 0x43, 0x00,0x00,0x00,0x00,0x00,0x00, 0x05, 0x02,0x00 ,0x01,0x00,0x16 },//18-----0x05 F2 set the host add

//    {0x68/*0-*/, 0x37,0x00, 0x43,/**/ 0x04,0x00,0x00,0x00,0x00,0x00/*10-*/,0x01,0x00,0x00,0x00,0x00,0x01/*16-*/,0x00,0x00,0x00,0x00,0x00,0x01/**/,0x13, 0x01,0x00 ,0x02,/*type*/ 0x00, 0x00/*15-nu*//*28-addr*/,0x10/*29-len-16*/,0x68/*30-*/,0x00,0x00,0x00,0x00,0x00,0x00/*addr*/,0x68,0x11,/**/0x0C,/**/0x37,0x44,0x33,0x37/**/,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00/*CS*/,0x16,0x00,0x16 },//19-----0x13 F1 req hosti
//    {0x68, 0x17,0x00, 0x43, 0x00,0x00,0x00,0x00,0x00,0x05, 0x13, 0x01, 0x00,0x02 ,0x00, 0x01, 0x00,0x00,0x00,0x00,0x00,0x02, 0x00,0x16 },//13-----0x13 F1 watch the ltu 
{0}
};
//#endif
U8 msg_sequence[LTU_NUM]={0};
#if LTU_NO_1
U8 LTU_number_1[][6] = 
{
{0x00,0x10,0x15,0x20,0x32,0x06},
{0x02,0x10,0x15,0x20,0x32,0x06},
//{0x22,0x00,0x15,0x20,0x32,0x05},
//{0x33,0x00,0x15,0x20,0x32,0x05},
{0x03,0x10,0x15,0x20,0x32,0x06},
{0x04,0x10,0x15,0x20,0x32,0x06},
{0x06,0x10,0x15,0x20,0x32,0x06},
{0x22,0x11,0x15,0x20,0x32,0x06},
//{0x05,0x02,0x15,0x20,0x32,0x05},
{0x37,0x10,0x15,0x20,0x32,0x06},
{0x38,0x10,0x15,0x20,0x32,0x06},
//{0x07,0x00,0x15,0x20,0x32,0x05},
//{0x05,0x02,0x15,0x20,0x32,0x05},
//{0x04,0x02,0x15,0x20,0x32,0x05},
//{0x08,0x00,0x15,0x20,0x32,0x05},
{0x09,0x00,0x15,0x20,0x32,0x06},
{0x10,0x00,0x15,0x20,0x32,0x06},
{0x11,0x00,0x15,0x20,0x32,0x05},
{0x1,0x00,0x00,0x00,0x00,0x00},
{}
};
#else
U8 LTU_number_1[][6] = 
{
{0x20,0x00,0x15,0x20,0x32,0x05},
{0x12,0x00,0x15,0x20,0x32,0x05},
{0x13,0x00,0x15,0x20,0x32,0x05},
{0x14,0x00,0x15,0x20,0x32,0x05},
{0x15,0x00,0x15,0x20,0x32,0x05},
{0x16,0x00,0x15,0x20,0x32,0x05},
{0x17,0x00,0x15,0x20,0x32,0x05},
{0x18,0x00,0x15,0x20,0x32,0x05},
{0x19,0x00,0x15,0x20,0x32,0x05},
{0x21,0x00,0x15,0x20,0x32,0x05},
{}
};
#endif
U8 get_message(const U8*,int len);
U8 get_14_msg(const U8*);
U8 getCS(U8*,int);
//U8 update_VA_ATT();

